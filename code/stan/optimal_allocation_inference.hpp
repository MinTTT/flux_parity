
// Code generated by stanc v2.26.1
#include <stan/model/model_header.hpp>
namespace optimal_allocation_inference_model_namespace {


inline void validate_positive_index(const char* var_name, const char* expr,
                                    int val) {
  if (val < 1) {
    std::stringstream msg;
    msg << "Found dimension size less than one in simplex declaration"
        << "; variable=" << var_name << "; dimension size expression=" << expr
        << "; expression value=" << val;
    std::string msg_str(msg.str());
    throw std::invalid_argument(msg_str.c_str());
  }
}

inline void validate_unit_vector_index(const char* var_name, const char* expr,
                                       int val) {
  if (val <= 1) {
    std::stringstream msg;
    if (val == 1) {
      msg << "Found dimension size one in unit vector declaration."
          << " One-dimensional unit vector is discrete"
          << " but the target distribution must be continuous."
          << " variable=" << var_name << "; dimension size expression=" << expr;
    } else {
      msg << "Found dimension size less than one in unit vector declaration"
          << "; variable=" << var_name << "; dimension size expression=" << expr
          << "; expression value=" << val;
    }
    std::string msg_str(msg.str());
    throw std::invalid_argument(msg_str.c_str());
  }
}


using std::istream;
using std::string;
using std::stringstream;
using std::vector;
using std::pow;
using stan::io::dump;
using stan::math::lgamma;
using stan::model::model_base_crtp;
using stan::model::rvalue;
using stan::model::cons_list;
using stan::model::index_uni;
using stan::model::index_max;
using stan::model::index_min;
using stan::model::index_min_max;
using stan::model::index_multi;
using stan::model::index_omni;
using stan::model::nil_index_list;
using namespace stan::math;
using stan::math::pow; 

stan::math::profile_map profiles__;
static int current_statement__= 0;
static const std::vector<string> locations_array__ = {" (found before start of program)",
                                                      " (in '/Users/gchure/Dropbox/git/postdoc_projects/modeling_growth/code/stan/optimal_allocation_inference.stan', line 25, column 4 to column 28)",
                                                      " (in '/Users/gchure/Dropbox/git/postdoc_projects/modeling_growth/code/stan/optimal_allocation_inference.stan', line 26, column 4 to column 35)",
                                                      " (in '/Users/gchure/Dropbox/git/postdoc_projects/modeling_growth/code/stan/optimal_allocation_inference.stan', line 27, column 4 to column 21)",
                                                      " (in '/Users/gchure/Dropbox/git/postdoc_projects/modeling_growth/code/stan/optimal_allocation_inference.stan', line 28, column 4 to column 34)",
                                                      " (in '/Users/gchure/Dropbox/git/postdoc_projects/modeling_growth/code/stan/optimal_allocation_inference.stan', line 29, column 4 to column 30)",
                                                      " (in '/Users/gchure/Dropbox/git/postdoc_projects/modeling_growth/code/stan/optimal_allocation_inference.stan', line 34, column 11 to column 17)",
                                                      " (in '/Users/gchure/Dropbox/git/postdoc_projects/modeling_growth/code/stan/optimal_allocation_inference.stan', line 34, column 4 to column 42)",
                                                      " (in '/Users/gchure/Dropbox/git/postdoc_projects/modeling_growth/code/stan/optimal_allocation_inference.stan', line 35, column 11 to column 17)",
                                                      " (in '/Users/gchure/Dropbox/git/postdoc_projects/modeling_growth/code/stan/optimal_allocation_inference.stan', line 35, column 4 to column 93)",
                                                      " (in '/Users/gchure/Dropbox/git/postdoc_projects/modeling_growth/code/stan/optimal_allocation_inference.stan', line 36, column 11 to column 17)",
                                                      " (in '/Users/gchure/Dropbox/git/postdoc_projects/modeling_growth/code/stan/optimal_allocation_inference.stan', line 36, column 4 to column 82)",
                                                      " (in '/Users/gchure/Dropbox/git/postdoc_projects/modeling_growth/code/stan/optimal_allocation_inference.stan', line 37, column 11 to column 17)",
                                                      " (in '/Users/gchure/Dropbox/git/postdoc_projects/modeling_growth/code/stan/optimal_allocation_inference.stan', line 37, column 4 to column 71)",
                                                      " (in '/Users/gchure/Dropbox/git/postdoc_projects/modeling_growth/code/stan/optimal_allocation_inference.stan', line 38, column 11 to column 18)",
                                                      " (in '/Users/gchure/Dropbox/git/postdoc_projects/modeling_growth/code/stan/optimal_allocation_inference.stan', line 38, column 4 to column 111)",
                                                      " (in '/Users/gchure/Dropbox/git/postdoc_projects/modeling_growth/code/stan/optimal_allocation_inference.stan', line 39, column 11 to column 18)",
                                                      " (in '/Users/gchure/Dropbox/git/postdoc_projects/modeling_growth/code/stan/optimal_allocation_inference.stan', line 39, column 4 to column 62)",
                                                      " (in '/Users/gchure/Dropbox/git/postdoc_projects/modeling_growth/code/stan/optimal_allocation_inference.stan', line 42, column 4 to column 27)",
                                                      " (in '/Users/gchure/Dropbox/git/postdoc_projects/modeling_growth/code/stan/optimal_allocation_inference.stan', line 43, column 4 to column 54)",
                                                      " (in '/Users/gchure/Dropbox/git/postdoc_projects/modeling_growth/code/stan/optimal_allocation_inference.stan', line 45, column 4 to column 21)",
                                                      " (in '/Users/gchure/Dropbox/git/postdoc_projects/modeling_growth/code/stan/optimal_allocation_inference.stan', line 46, column 4 to column 37)",
                                                      " (in '/Users/gchure/Dropbox/git/postdoc_projects/modeling_growth/code/stan/optimal_allocation_inference.stan', line 47, column 4 to column 33)",
                                                      " (in '/Users/gchure/Dropbox/git/postdoc_projects/modeling_growth/code/stan/optimal_allocation_inference.stan', line 50, column 4 to column 49)",
                                                      " (in '/Users/gchure/Dropbox/git/postdoc_projects/modeling_growth/code/stan/optimal_allocation_inference.stan', line 51, column 4 to column 52)",
                                                      " (in '/Users/gchure/Dropbox/git/postdoc_projects/modeling_growth/code/stan/optimal_allocation_inference.stan', line 3, column 4 to column 24)",
                                                      " (in '/Users/gchure/Dropbox/git/postdoc_projects/modeling_growth/code/stan/optimal_allocation_inference.stan', line 4, column 4 to column 25)",
                                                      " (in '/Users/gchure/Dropbox/git/postdoc_projects/modeling_growth/code/stan/optimal_allocation_inference.stan', line 5, column 41 to column 48)",
                                                      " (in '/Users/gchure/Dropbox/git/postdoc_projects/modeling_growth/code/stan/optimal_allocation_inference.stan', line 5, column 4 to column 50)",
                                                      " (in '/Users/gchure/Dropbox/git/postdoc_projects/modeling_growth/code/stan/optimal_allocation_inference.stan', line 9, column 20 to column 26)",
                                                      " (in '/Users/gchure/Dropbox/git/postdoc_projects/modeling_growth/code/stan/optimal_allocation_inference.stan', line 9, column 4 to column 40)",
                                                      " (in '/Users/gchure/Dropbox/git/postdoc_projects/modeling_growth/code/stan/optimal_allocation_inference.stan', line 10, column 29 to column 35)",
                                                      " (in '/Users/gchure/Dropbox/git/postdoc_projects/modeling_growth/code/stan/optimal_allocation_inference.stan', line 10, column 4 to column 47)",
                                                      " (in '/Users/gchure/Dropbox/git/postdoc_projects/modeling_growth/code/stan/optimal_allocation_inference.stan', line 11, column 20 to column 27)",
                                                      " (in '/Users/gchure/Dropbox/git/postdoc_projects/modeling_growth/code/stan/optimal_allocation_inference.stan', line 11, column 4 to column 40)",
                                                      " (in '/Users/gchure/Dropbox/git/postdoc_projects/modeling_growth/code/stan/optimal_allocation_inference.stan', line 14, column 4 to column 31)",
                                                      " (in '/Users/gchure/Dropbox/git/postdoc_projects/modeling_growth/code/stan/optimal_allocation_inference.stan', line 15, column 4 to column 34)",
                                                      " (in '/Users/gchure/Dropbox/git/postdoc_projects/modeling_growth/code/stan/optimal_allocation_inference.stan', line 16, column 4 to column 23)",
                                                      " (in '/Users/gchure/Dropbox/git/postdoc_projects/modeling_growth/code/stan/optimal_allocation_inference.stan', line 21, column 20 to column 27)",
                                                      " (in '/Users/gchure/Dropbox/git/postdoc_projects/modeling_growth/code/stan/optimal_allocation_inference.stan', line 21, column 4 to column 70)",
                                                      " (in '/Users/gchure/Dropbox/git/postdoc_projects/modeling_growth/code/stan/optimal_allocation_inference.stan', line 26, column 20 to column 26)"};



class optimal_allocation_inference_model final : public model_base_crtp<optimal_allocation_inference_model> {

 private:
  int N_frac;
  int N_elong;
  std::vector<int> elong_idx;
  Eigen::Matrix<double, -1, 1> growth_rate;
  Eigen::Matrix<double, -1, 1> mass_frac;
  Eigen::Matrix<double, -1, 1> elong_rate;
  double gamma_max_mu;
  double gamma_max_sigma;
  double phiO;
  Eigen::Matrix<double, -1, 1> resc_elong_rate;
 
 public:
  ~optimal_allocation_inference_model() { }
  
  inline std::string model_name() const final { return "optimal_allocation_inference_model"; }

  inline std::vector<std::string> model_compile_info() const noexcept {
    return std::vector<std::string>{"stanc_version = stanc3 v2.26.1", "stancflags = "};
  }
  
  
  optimal_allocation_inference_model(stan::io::var_context& context__,
                                     unsigned int random_seed__ = 0,
                                     std::ostream* pstream__ = nullptr) : model_base_crtp(0) {
    using local_scalar_t__ = double ;
    boost::ecuyer1988 base_rng__ = 
        stan::services::util::create_rng(random_seed__, 0);
    (void) base_rng__;  // suppress unused var warning
    static const char* function__ = "optimal_allocation_inference_model_namespace::optimal_allocation_inference_model";
    (void) function__;  // suppress unused var warning
    local_scalar_t__ DUMMY_VAR__(std::numeric_limits<double>::quiet_NaN());
    (void) DUMMY_VAR__;  // suppress unused var warning
    
    try {
      int pos__;
      pos__ = std::numeric_limits<int>::min();
      
      pos__ = 1;
      current_statement__ = 25;
      context__.validate_dims("data initialization","N_frac","int",
          context__.to_vec());
      N_frac = std::numeric_limits<int>::min();
      
      current_statement__ = 25;
      N_frac = context__.vals_i("N_frac")[(1 - 1)];
      current_statement__ = 25;
      current_statement__ = 25;
      check_greater_or_equal(function__, "N_frac", N_frac, 1);
      current_statement__ = 26;
      context__.validate_dims("data initialization","N_elong","int",
          context__.to_vec());
      N_elong = std::numeric_limits<int>::min();
      
      current_statement__ = 26;
      N_elong = context__.vals_i("N_elong")[(1 - 1)];
      current_statement__ = 26;
      current_statement__ = 26;
      check_greater_or_equal(function__, "N_elong", N_elong, 1);
      current_statement__ = 27;
      validate_non_negative_index("elong_idx", "N_elong", N_elong);
      current_statement__ = 28;
      context__.validate_dims("data initialization","elong_idx","int",
          context__.to_vec(N_elong));
      elong_idx = std::vector<int>(N_elong, std::numeric_limits<int>::min());
      
      current_statement__ = 28;
      assign(elong_idx, nil_index_list(), context__.vals_i("elong_idx"),
        "assigning variable elong_idx");
      current_statement__ = 28;
      for (int sym1__ = 1; sym1__ <= N_elong; ++sym1__) {
        current_statement__ = 28;
        current_statement__ = 28;
        check_greater_or_equal(function__, "elong_idx[sym1__]",
                               elong_idx[(sym1__ - 1)], 1);}
      current_statement__ = 28;
      for (int sym1__ = 1; sym1__ <= N_elong; ++sym1__) {
        current_statement__ = 28;
        current_statement__ = 28;
        check_less_or_equal(function__, "elong_idx[sym1__]",
                            elong_idx[(sym1__ - 1)], N_frac);}
      current_statement__ = 29;
      validate_non_negative_index("growth_rate", "N_frac", N_frac);
      current_statement__ = 30;
      context__.validate_dims("data initialization","growth_rate","double",
          context__.to_vec(N_frac));
      growth_rate = Eigen::Matrix<double, -1, 1>(N_frac);
      stan::math::fill(growth_rate, std::numeric_limits<double>::quiet_NaN());
      
      {
        std::vector<local_scalar_t__> growth_rate_flat__;
        current_statement__ = 30;
        assign(growth_rate_flat__, nil_index_list(),
          context__.vals_r("growth_rate"),
          "assigning variable growth_rate_flat__");
        current_statement__ = 30;
        pos__ = 1;
        current_statement__ = 30;
        for (int sym1__ = 1; sym1__ <= N_frac; ++sym1__) {
          current_statement__ = 30;
          assign(growth_rate, cons_list(index_uni(sym1__), nil_index_list()),
            growth_rate_flat__[(pos__ - 1)], "assigning variable growth_rate");
          current_statement__ = 30;
          pos__ = (pos__ + 1);}
      }
      current_statement__ = 30;
      for (int sym1__ = 1; sym1__ <= N_frac; ++sym1__) {
        current_statement__ = 30;
        current_statement__ = 30;
        check_greater_or_equal(function__, "growth_rate[sym1__]",
                               growth_rate[(sym1__ - 1)], 0);}
      current_statement__ = 31;
      validate_non_negative_index("mass_frac", "N_frac", N_frac);
      current_statement__ = 32;
      context__.validate_dims("data initialization","mass_frac","double",
          context__.to_vec(N_frac));
      mass_frac = Eigen::Matrix<double, -1, 1>(N_frac);
      stan::math::fill(mass_frac, std::numeric_limits<double>::quiet_NaN());
      
      {
        std::vector<local_scalar_t__> mass_frac_flat__;
        current_statement__ = 32;
        assign(mass_frac_flat__, nil_index_list(),
          context__.vals_r("mass_frac"),
          "assigning variable mass_frac_flat__");
        current_statement__ = 32;
        pos__ = 1;
        current_statement__ = 32;
        for (int sym1__ = 1; sym1__ <= N_frac; ++sym1__) {
          current_statement__ = 32;
          assign(mass_frac, cons_list(index_uni(sym1__), nil_index_list()),
            mass_frac_flat__[(pos__ - 1)], "assigning variable mass_frac");
          current_statement__ = 32;
          pos__ = (pos__ + 1);}
      }
      current_statement__ = 32;
      for (int sym1__ = 1; sym1__ <= N_frac; ++sym1__) {
        current_statement__ = 32;
        current_statement__ = 32;
        check_greater_or_equal(function__, "mass_frac[sym1__]",
                               mass_frac[(sym1__ - 1)], 0);}
      current_statement__ = 32;
      for (int sym1__ = 1; sym1__ <= N_frac; ++sym1__) {
        current_statement__ = 32;
        current_statement__ = 32;
        check_less_or_equal(function__, "mass_frac[sym1__]",
                            mass_frac[(sym1__ - 1)], 1);}
      current_statement__ = 33;
      validate_non_negative_index("elong_rate", "N_elong", N_elong);
      current_statement__ = 34;
      context__.validate_dims("data initialization","elong_rate","double",
          context__.to_vec(N_elong));
      elong_rate = Eigen::Matrix<double, -1, 1>(N_elong);
      stan::math::fill(elong_rate, std::numeric_limits<double>::quiet_NaN());
      
      {
        std::vector<local_scalar_t__> elong_rate_flat__;
        current_statement__ = 34;
        assign(elong_rate_flat__, nil_index_list(),
          context__.vals_r("elong_rate"),
          "assigning variable elong_rate_flat__");
        current_statement__ = 34;
        pos__ = 1;
        current_statement__ = 34;
        for (int sym1__ = 1; sym1__ <= N_elong; ++sym1__) {
          current_statement__ = 34;
          assign(elong_rate, cons_list(index_uni(sym1__), nil_index_list()),
            elong_rate_flat__[(pos__ - 1)], "assigning variable elong_rate");
          current_statement__ = 34;
          pos__ = (pos__ + 1);}
      }
      current_statement__ = 34;
      for (int sym1__ = 1; sym1__ <= N_elong; ++sym1__) {
        current_statement__ = 34;
        current_statement__ = 34;
        check_greater_or_equal(function__, "elong_rate[sym1__]",
                               elong_rate[(sym1__ - 1)], 0);}
      current_statement__ = 35;
      context__.validate_dims("data initialization","gamma_max_mu","double",
          context__.to_vec());
      gamma_max_mu = std::numeric_limits<double>::quiet_NaN();
      
      current_statement__ = 35;
      gamma_max_mu = context__.vals_r("gamma_max_mu")[(1 - 1)];
      current_statement__ = 35;
      current_statement__ = 35;
      check_greater_or_equal(function__, "gamma_max_mu", gamma_max_mu, 0);
      current_statement__ = 36;
      context__.validate_dims("data initialization","gamma_max_sigma",
          "double",context__.to_vec());
      gamma_max_sigma = std::numeric_limits<double>::quiet_NaN();
      
      current_statement__ = 36;
      gamma_max_sigma = context__.vals_r("gamma_max_sigma")[(1 - 1)];
      current_statement__ = 36;
      current_statement__ = 36;
      check_greater_or_equal(function__, "gamma_max_sigma", gamma_max_sigma,
                             0);
      current_statement__ = 37;
      context__.validate_dims("data initialization","phiO","double",
          context__.to_vec());
      phiO = std::numeric_limits<double>::quiet_NaN();
      
      current_statement__ = 37;
      phiO = context__.vals_r("phiO")[(1 - 1)];
      current_statement__ = 37;
      current_statement__ = 37;
      check_greater_or_equal(function__, "phiO", phiO, 0);
      current_statement__ = 38;
      validate_non_negative_index("resc_elong_rate", "N_elong", N_elong);
      current_statement__ = 39;
      resc_elong_rate = Eigen::Matrix<double, -1, 1>(N_elong);
      stan::math::fill(resc_elong_rate, std::numeric_limits<double>::quiet_NaN());
      
      current_statement__ = 39;
      assign(resc_elong_rate, nil_index_list(),
        divide(multiply(elong_rate, 7459), 3600),
        "assigning variable resc_elong_rate");
      current_statement__ = 39;
      for (int sym1__ = 1; sym1__ <= N_elong; ++sym1__) {
        current_statement__ = 39;
        current_statement__ = 39;
        check_greater_or_equal(function__, "resc_elong_rate[sym1__]",
                               resc_elong_rate[(sym1__ - 1)], 0);}
      current_statement__ = 40;
      validate_non_negative_index("nu_max", "N_frac", N_frac);
    } catch (const std::exception& e) {
      stan::lang::rethrow_located(e, locations_array__[current_statement__]);
      // Next line prevents compiler griping about no return
      throw std::runtime_error("*** IF YOU SEE THIS, PLEASE REPORT A BUG ***"); 
    }
    num_params_r__ = 0U;
    
    try {
      num_params_r__ += 1;
      num_params_r__ += N_frac;
      num_params_r__ += 1;
      num_params_r__ += 1;
      num_params_r__ += 1;
    } catch (const std::exception& e) {
      stan::lang::rethrow_located(e, locations_array__[current_statement__]);
      // Next line prevents compiler griping about no return
      throw std::runtime_error("*** IF YOU SEE THIS, PLEASE REPORT A BUG ***"); 
    }
  }
  template <bool propto__, bool jacobian__, typename VecR, typename VecI, stan::require_vector_like_t<VecR>* = nullptr, stan::require_vector_like_vt<std::is_integral, VecI>* = nullptr>
  inline stan::scalar_type_t<VecR> log_prob_impl(VecR& params_r__,
                                                 VecI& params_i__,
                                                 std::ostream* pstream__ = nullptr) const {
    using T__ = stan::scalar_type_t<VecR>;
    using local_scalar_t__ = T__;
    T__ lp__(0.0);
    stan::math::accumulator<T__> lp_accum__;
    static const char* function__ = "optimal_allocation_inference_model_namespace::log_prob";
(void) function__;  // suppress unused var warning

    stan::io::reader<local_scalar_t__> in__(params_r__, params_i__);
    local_scalar_t__ DUMMY_VAR__(std::numeric_limits<double>::quiet_NaN());
    (void) DUMMY_VAR__;  // suppress unused var warning

    
    try {
      local_scalar_t__ gamma_max;
      gamma_max = DUMMY_VAR__;
      
      current_statement__ = 1;
      gamma_max = in__.scalar();
      current_statement__ = 1;
      if (jacobian__) {
        current_statement__ = 1;
        gamma_max = stan::math::lb_constrain(gamma_max, 0, lp__);
      } else {
        current_statement__ = 1;
        gamma_max = stan::math::lb_constrain(gamma_max, 0);
      }
      Eigen::Matrix<local_scalar_t__, -1, 1> nu_max;
      nu_max = Eigen::Matrix<local_scalar_t__, -1, 1>(N_frac);
      stan::math::fill(nu_max, DUMMY_VAR__);
      
      current_statement__ = 2;
      nu_max = in__.vector(N_frac);
      current_statement__ = 2;
      for (int sym1__ = 1; sym1__ <= N_frac; ++sym1__) {
        current_statement__ = 2;
        if (jacobian__) {
          current_statement__ = 2;
          assign(nu_max, cons_list(index_uni(sym1__), nil_index_list()),
            stan::math::lb_constrain(nu_max[(sym1__ - 1)], 0, lp__),
            "assigning variable nu_max");
        } else {
          current_statement__ = 2;
          assign(nu_max, cons_list(index_uni(sym1__), nil_index_list()),
            stan::math::lb_constrain(nu_max[(sym1__ - 1)], 0),
            "assigning variable nu_max");
        }}
      local_scalar_t__ Kd;
      Kd = DUMMY_VAR__;
      
      current_statement__ = 3;
      Kd = in__.scalar();
      current_statement__ = 3;
      if (jacobian__) {
        current_statement__ = 3;
        Kd = stan::math::lb_constrain(Kd, 0, lp__);
      } else {
        current_statement__ = 3;
        Kd = stan::math::lb_constrain(Kd, 0);
      }
      local_scalar_t__ mass_frac_sigma;
      mass_frac_sigma = DUMMY_VAR__;
      
      current_statement__ = 4;
      mass_frac_sigma = in__.scalar();
      current_statement__ = 4;
      if (jacobian__) {
        current_statement__ = 4;
        mass_frac_sigma = stan::math::lb_constrain(mass_frac_sigma, 0, lp__);
      } else {
        current_statement__ = 4;
        mass_frac_sigma = stan::math::lb_constrain(mass_frac_sigma, 0);
      }
      local_scalar_t__ elong_sigma;
      elong_sigma = DUMMY_VAR__;
      
      current_statement__ = 5;
      elong_sigma = in__.scalar();
      current_statement__ = 5;
      if (jacobian__) {
        current_statement__ = 5;
        elong_sigma = stan::math::lb_constrain(elong_sigma, 0, lp__);
      } else {
        current_statement__ = 5;
        elong_sigma = stan::math::lb_constrain(elong_sigma, 0);
      }
      {
        current_statement__ = 6;
        validate_non_negative_index("a", "N_frac", N_frac);
        Eigen::Matrix<local_scalar_t__, -1, 1> a;
        a = Eigen::Matrix<local_scalar_t__, -1, 1>(N_frac);
        stan::math::fill(a, DUMMY_VAR__);
        
        current_statement__ = 7;
        assign(a, nil_index_list(), multiply(gamma_max, nu_max),
          "assigning variable a");
        current_statement__ = 8;
        validate_non_negative_index("b", "N_frac", N_frac);
        Eigen::Matrix<local_scalar_t__, -1, 1> b;
        b = Eigen::Matrix<local_scalar_t__, -1, 1>(N_frac);
        stan::math::fill(b, DUMMY_VAR__);
        
        current_statement__ = 9;
        assign(b, nil_index_list(),
          add(elt_multiply(growth_rate, add(gamma_max, nu_max)),
            multiply(multiply(gamma_max, nu_max), (phiO - 1))),
          "assigning variable b");
        current_statement__ = 10;
        validate_non_negative_index("c", "N_frac", N_frac);
        Eigen::Matrix<local_scalar_t__, -1, 1> c;
        c = Eigen::Matrix<local_scalar_t__, -1, 1>(N_frac);
        stan::math::fill(c, DUMMY_VAR__);
        
        current_statement__ = 11;
        assign(c, nil_index_list(),
          elt_multiply(growth_rate,
            subtract(multiply(nu_max, (phiO - 1)),
              multiply(growth_rate, (Kd - 1)))), "assigning variable c");
        current_statement__ = 12;
        validate_non_negative_index("frac_mu", "N_frac", N_frac);
        Eigen::Matrix<local_scalar_t__, -1, 1> frac_mu;
        frac_mu = Eigen::Matrix<local_scalar_t__, -1, 1>(N_frac);
        stan::math::fill(frac_mu, DUMMY_VAR__);
        
        current_statement__ = 13;
        assign(frac_mu, nil_index_list(),
          elt_divide(
            subtract(minus(b),
              stan::math::sqrt(
                subtract(pow(b, 2), elt_multiply(multiply(4, a), c)))),
            multiply(2, a)), "assigning variable frac_mu");
        current_statement__ = 14;
        validate_non_negative_index("c_AA", "N_elong", N_elong);
        Eigen::Matrix<local_scalar_t__, -1, 1> c_AA;
        c_AA = Eigen::Matrix<local_scalar_t__, -1, 1>(N_elong);
        stan::math::fill(c_AA, DUMMY_VAR__);
        
        current_statement__ = 15;
        assign(c_AA, nil_index_list(),
          add(-1,
            elt_divide(
              elt_multiply(
                rvalue(nu_max,
                  cons_list(index_multi(elong_idx), nil_index_list()),
                  "nu_max"),
                subtract((1 - phiO),
                  rvalue(frac_mu,
                    cons_list(index_multi(elong_idx), nil_index_list()),
                    "frac_mu"))),
              rvalue(growth_rate,
                cons_list(index_multi(elong_idx), nil_index_list()),
                "growth_rate"))), "assigning variable c_AA");
        current_statement__ = 16;
        validate_non_negative_index("elong_mu", "N_elong", N_elong);
        Eigen::Matrix<local_scalar_t__, -1, 1> elong_mu;
        elong_mu = Eigen::Matrix<local_scalar_t__, -1, 1>(N_elong);
        stan::math::fill(elong_mu, DUMMY_VAR__);
        
        current_statement__ = 17;
        assign(elong_mu, nil_index_list(),
          elt_divide(multiply(gamma_max, c_AA), add(c_AA, Kd)),
          "assigning variable elong_mu");
        current_statement__ = 18;
        lp_accum__.add(normal_lpdf<propto__>(nu_max, 0, 10));
        current_statement__ = 19;
        lp_accum__.add(
          normal_lpdf<propto__>(gamma_max, gamma_max_mu, gamma_max_sigma));
        current_statement__ = 20;
        lp_accum__.add(gamma_lpdf<propto__>(Kd, 1, 5));
        current_statement__ = 21;
        lp_accum__.add(normal_lpdf<propto__>(mass_frac_sigma, 0, 0.1));
        current_statement__ = 22;
        lp_accum__.add(normal_lpdf<propto__>(elong_sigma, 0, 0.5));
        current_statement__ = 23;
        lp_accum__.add(
          normal_lpdf<propto__>(mass_frac, frac_mu, mass_frac_sigma));
        current_statement__ = 24;
        lp_accum__.add(
          normal_lpdf<propto__>(resc_elong_rate, elong_mu, elong_sigma));
      }
    } catch (const std::exception& e) {
      stan::lang::rethrow_located(e, locations_array__[current_statement__]);
      // Next line prevents compiler griping about no return
      throw std::runtime_error("*** IF YOU SEE THIS, PLEASE REPORT A BUG ***"); 
    }
    lp_accum__.add(lp__);
    return lp_accum__.sum();
    } // log_prob_impl() 
    
  template <typename RNG, typename VecR, typename VecI, typename VecVar, stan::require_vector_like_vt<std::is_floating_point, VecR>* = nullptr, stan::require_vector_like_vt<std::is_integral, VecI>* = nullptr, stan::require_std_vector_vt<std::is_floating_point, VecVar>* = nullptr>
  inline void write_array_impl(RNG& base_rng__, VecR& params_r__,
                               VecI& params_i__, VecVar& vars__,
                               const bool emit_transformed_parameters__ = true,
                               const bool emit_generated_quantities__ = true,
                               std::ostream* pstream__ = nullptr) const {
    using local_scalar_t__ = double;
    vars__.resize(0);
    stan::io::reader<local_scalar_t__> in__(params_r__, params_i__);
    static const char* function__ = "optimal_allocation_inference_model_namespace::write_array";
(void) function__;  // suppress unused var warning

    (void) function__;  // suppress unused var warning

    double lp__ = 0.0;
    (void) lp__;  // dummy to suppress unused var warning
    stan::math::accumulator<double> lp_accum__;
    local_scalar_t__ DUMMY_VAR__(std::numeric_limits<double>::quiet_NaN());
    (void) DUMMY_VAR__;  // suppress unused var warning

    
    try {
      double gamma_max;
      gamma_max = std::numeric_limits<double>::quiet_NaN();
      
      current_statement__ = 1;
      gamma_max = in__.scalar();
      current_statement__ = 1;
      gamma_max = stan::math::lb_constrain(gamma_max, 0);
      Eigen::Matrix<double, -1, 1> nu_max;
      nu_max = Eigen::Matrix<double, -1, 1>(N_frac);
      stan::math::fill(nu_max, std::numeric_limits<double>::quiet_NaN());
      
      current_statement__ = 2;
      nu_max = in__.vector(N_frac);
      current_statement__ = 2;
      for (int sym1__ = 1; sym1__ <= N_frac; ++sym1__) {
        current_statement__ = 2;
        assign(nu_max, cons_list(index_uni(sym1__), nil_index_list()),
          stan::math::lb_constrain(nu_max[(sym1__ - 1)], 0),
          "assigning variable nu_max");}
      double Kd;
      Kd = std::numeric_limits<double>::quiet_NaN();
      
      current_statement__ = 3;
      Kd = in__.scalar();
      current_statement__ = 3;
      Kd = stan::math::lb_constrain(Kd, 0);
      double mass_frac_sigma;
      mass_frac_sigma = std::numeric_limits<double>::quiet_NaN();
      
      current_statement__ = 4;
      mass_frac_sigma = in__.scalar();
      current_statement__ = 4;
      mass_frac_sigma = stan::math::lb_constrain(mass_frac_sigma, 0);
      double elong_sigma;
      elong_sigma = std::numeric_limits<double>::quiet_NaN();
      
      current_statement__ = 5;
      elong_sigma = in__.scalar();
      current_statement__ = 5;
      elong_sigma = stan::math::lb_constrain(elong_sigma, 0);
      vars__.emplace_back(gamma_max);
      for (int sym1__ = 1; sym1__ <= N_frac; ++sym1__) {
        vars__.emplace_back(nu_max[(sym1__ - 1)]);}
      vars__.emplace_back(Kd);
      vars__.emplace_back(mass_frac_sigma);
      vars__.emplace_back(elong_sigma);
      if (logical_negation((primitive_value(emit_transformed_parameters__) ||
            primitive_value(emit_generated_quantities__)))) {
        return ;
      } 
      if (logical_negation(emit_generated_quantities__)) {
        return ;
      } 
    } catch (const std::exception& e) {
      stan::lang::rethrow_located(e, locations_array__[current_statement__]);
      // Next line prevents compiler griping about no return
      throw std::runtime_error("*** IF YOU SEE THIS, PLEASE REPORT A BUG ***"); 
    }
    } // write_array_impl() 
    
  template <typename VecVar, typename VecI, stan::require_std_vector_t<VecVar>* = nullptr, stan::require_vector_like_vt<std::is_integral, VecI>* = nullptr>
  inline void transform_inits_impl(const stan::io::var_context& context__,
                                   VecI& params_i__, VecVar& vars__,
                                   std::ostream* pstream__ = nullptr) const {
    using local_scalar_t__ = double;
    vars__.clear();
    vars__.reserve(num_params_r__);
    
    try {
      int pos__;
      pos__ = std::numeric_limits<int>::min();
      
      pos__ = 1;
      double gamma_max;
      gamma_max = std::numeric_limits<double>::quiet_NaN();
      
      current_statement__ = 1;
      gamma_max = context__.vals_r("gamma_max")[(1 - 1)];
      double gamma_max_free__;
      gamma_max_free__ = std::numeric_limits<double>::quiet_NaN();
      
      current_statement__ = 1;
      gamma_max_free__ = stan::math::lb_free(gamma_max, 0);
      Eigen::Matrix<double, -1, 1> nu_max;
      nu_max = Eigen::Matrix<double, -1, 1>(N_frac);
      stan::math::fill(nu_max, std::numeric_limits<double>::quiet_NaN());
      
      {
        std::vector<local_scalar_t__> nu_max_flat__;
        current_statement__ = 2;
        assign(nu_max_flat__, nil_index_list(), context__.vals_r("nu_max"),
          "assigning variable nu_max_flat__");
        current_statement__ = 2;
        pos__ = 1;
        current_statement__ = 2;
        for (int sym1__ = 1; sym1__ <= N_frac; ++sym1__) {
          current_statement__ = 2;
          assign(nu_max, cons_list(index_uni(sym1__), nil_index_list()),
            nu_max_flat__[(pos__ - 1)], "assigning variable nu_max");
          current_statement__ = 2;
          pos__ = (pos__ + 1);}
      }
      Eigen::Matrix<double, -1, 1> nu_max_free__;
      nu_max_free__ = Eigen::Matrix<double, -1, 1>(N_frac);
      stan::math::fill(nu_max_free__, std::numeric_limits<double>::quiet_NaN());
      
      current_statement__ = 2;
      for (int sym1__ = 1; sym1__ <= N_frac; ++sym1__) {
        current_statement__ = 2;
        assign(nu_max_free__, cons_list(index_uni(sym1__), nil_index_list()),
          stan::math::lb_free(nu_max[(sym1__ - 1)], 0),
          "assigning variable nu_max_free__");}
      double Kd;
      Kd = std::numeric_limits<double>::quiet_NaN();
      
      current_statement__ = 3;
      Kd = context__.vals_r("Kd")[(1 - 1)];
      double Kd_free__;
      Kd_free__ = std::numeric_limits<double>::quiet_NaN();
      
      current_statement__ = 3;
      Kd_free__ = stan::math::lb_free(Kd, 0);
      double mass_frac_sigma;
      mass_frac_sigma = std::numeric_limits<double>::quiet_NaN();
      
      current_statement__ = 4;
      mass_frac_sigma = context__.vals_r("mass_frac_sigma")[(1 - 1)];
      double mass_frac_sigma_free__;
      mass_frac_sigma_free__ = std::numeric_limits<double>::quiet_NaN();
      
      current_statement__ = 4;
      mass_frac_sigma_free__ = stan::math::lb_free(mass_frac_sigma, 0);
      double elong_sigma;
      elong_sigma = std::numeric_limits<double>::quiet_NaN();
      
      current_statement__ = 5;
      elong_sigma = context__.vals_r("elong_sigma")[(1 - 1)];
      double elong_sigma_free__;
      elong_sigma_free__ = std::numeric_limits<double>::quiet_NaN();
      
      current_statement__ = 5;
      elong_sigma_free__ = stan::math::lb_free(elong_sigma, 0);
      vars__.emplace_back(gamma_max_free__);
      for (int sym1__ = 1; sym1__ <= N_frac; ++sym1__) {
        vars__.emplace_back(nu_max_free__[(sym1__ - 1)]);}
      vars__.emplace_back(Kd_free__);
      vars__.emplace_back(mass_frac_sigma_free__);
      vars__.emplace_back(elong_sigma_free__);
    } catch (const std::exception& e) {
      stan::lang::rethrow_located(e, locations_array__[current_statement__]);
      // Next line prevents compiler griping about no return
      throw std::runtime_error("*** IF YOU SEE THIS, PLEASE REPORT A BUG ***"); 
    }
    } // transform_inits_impl() 
    
  inline void get_param_names(std::vector<std::string>& names__) const {
    
    names__.clear();
    names__.emplace_back("gamma_max");
    names__.emplace_back("nu_max");
    names__.emplace_back("Kd");
    names__.emplace_back("mass_frac_sigma");
    names__.emplace_back("elong_sigma");
    } // get_param_names() 
    
  inline void get_dims(std::vector<std::vector<size_t>>& dimss__) const {
    dimss__.clear();
    dimss__.emplace_back(std::vector<size_t>{});
    
    dimss__.emplace_back(std::vector<size_t>{static_cast<size_t>(N_frac)});
    
    dimss__.emplace_back(std::vector<size_t>{});
    
    dimss__.emplace_back(std::vector<size_t>{});
    
    dimss__.emplace_back(std::vector<size_t>{});
    
    } // get_dims() 
    
  inline void constrained_param_names(
                                      std::vector<std::string>& param_names__,
                                      bool emit_transformed_parameters__ = true,
                                      bool emit_generated_quantities__ = true) const
    final {
    
    param_names__.emplace_back(std::string() + "gamma_max");
    for (int sym1__ = 1; sym1__ <= N_frac; ++sym1__) {
      {
        param_names__.emplace_back(std::string() + "nu_max" + '.' + std::to_string(sym1__));
      }}
    param_names__.emplace_back(std::string() + "Kd");
    param_names__.emplace_back(std::string() + "mass_frac_sigma");
    param_names__.emplace_back(std::string() + "elong_sigma");
    if (emit_transformed_parameters__) {
      
    }
    
    if (emit_generated_quantities__) {
      
    }
    
    } // constrained_param_names() 
    
  inline void unconstrained_param_names(
                                        std::vector<std::string>& param_names__,
                                        bool emit_transformed_parameters__ = true,
                                        bool emit_generated_quantities__ = true) const
    final {
    
    param_names__.emplace_back(std::string() + "gamma_max");
    for (int sym1__ = 1; sym1__ <= N_frac; ++sym1__) {
      {
        param_names__.emplace_back(std::string() + "nu_max" + '.' + std::to_string(sym1__));
      }}
    param_names__.emplace_back(std::string() + "Kd");
    param_names__.emplace_back(std::string() + "mass_frac_sigma");
    param_names__.emplace_back(std::string() + "elong_sigma");
    if (emit_transformed_parameters__) {
      
    }
    
    if (emit_generated_quantities__) {
      
    }
    
    } // unconstrained_param_names() 
    
  inline std::string get_constrained_sizedtypes() const {
    stringstream s__;
    s__ << "[{\"name\":\"gamma_max\",\"type\":{\"name\":\"real\"},\"block\":\"parameters\"},{\"name\":\"nu_max\",\"type\":{\"name\":\"vector\",\"length\":" << N_frac << "},\"block\":\"parameters\"},{\"name\":\"Kd\",\"type\":{\"name\":\"real\"},\"block\":\"parameters\"},{\"name\":\"mass_frac_sigma\",\"type\":{\"name\":\"real\"},\"block\":\"parameters\"},{\"name\":\"elong_sigma\",\"type\":{\"name\":\"real\"},\"block\":\"parameters\"}]";
    return s__.str();
    } // get_constrained_sizedtypes() 
    
  inline std::string get_unconstrained_sizedtypes() const {
    stringstream s__;
    s__ << "[{\"name\":\"gamma_max\",\"type\":{\"name\":\"real\"},\"block\":\"parameters\"},{\"name\":\"nu_max\",\"type\":{\"name\":\"vector\",\"length\":" << N_frac << "},\"block\":\"parameters\"},{\"name\":\"Kd\",\"type\":{\"name\":\"real\"},\"block\":\"parameters\"},{\"name\":\"mass_frac_sigma\",\"type\":{\"name\":\"real\"},\"block\":\"parameters\"},{\"name\":\"elong_sigma\",\"type\":{\"name\":\"real\"},\"block\":\"parameters\"}]";
    return s__.str();
    } // get_unconstrained_sizedtypes() 
    
  
    // Begin method overload boilerplate
    template <typename RNG>
    inline void write_array(RNG& base_rng,
                            Eigen::Matrix<double,Eigen::Dynamic,1>& params_r,
                            Eigen::Matrix<double,Eigen::Dynamic,1>& vars,
                            const bool emit_transformed_parameters = true,
                            const bool emit_generated_quantities = true,
                            std::ostream* pstream = nullptr) const {
      std::vector<double> vars_vec(vars.size());
      std::vector<int> params_i;
      write_array_impl(base_rng, params_r, params_i, vars_vec,
          emit_transformed_parameters, emit_generated_quantities, pstream);
      vars.resize(vars_vec.size());
      for (int i = 0; i < vars.size(); ++i) {
        vars.coeffRef(i) = vars_vec[i];
      }
    }

    template <typename RNG>
    inline void write_array(RNG& base_rng, std::vector<double>& params_r,
                            std::vector<int>& params_i,
                            std::vector<double>& vars,
                            bool emit_transformed_parameters = true,
                            bool emit_generated_quantities = true,
                            std::ostream* pstream = nullptr) const {
      write_array_impl(base_rng, params_r, params_i, vars, emit_transformed_parameters, emit_generated_quantities, pstream);
    }

    template <bool propto__, bool jacobian__, typename T_>
    inline T_ log_prob(Eigen::Matrix<T_,Eigen::Dynamic,1>& params_r,
                       std::ostream* pstream = nullptr) const {
      Eigen::Matrix<int, -1, 1> params_i;
      return log_prob_impl<propto__, jacobian__>(params_r, params_i, pstream);
    }

    template <bool propto__, bool jacobian__, typename T__>
    inline T__ log_prob(std::vector<T__>& params_r,
                        std::vector<int>& params_i,
                        std::ostream* pstream = nullptr) const {
      return log_prob_impl<propto__, jacobian__>(params_r, params_i, pstream);
    }
  

    inline void transform_inits(const stan::io::var_context& context,
                         Eigen::Matrix<double, Eigen::Dynamic, 1>& params_r,
                         std::ostream* pstream = nullptr) const final {
      std::vector<double> params_r_vec(params_r.size());
      std::vector<int> params_i;
      transform_inits_impl(context, params_i, params_r_vec, pstream);
      params_r.resize(params_r_vec.size());
      for (int i = 0; i < params_r.size(); ++i) {
        params_r.coeffRef(i) = params_r_vec[i];
      }
    }
    inline void transform_inits(const stan::io::var_context& context,
                                std::vector<int>& params_i,
                                std::vector<double>& vars,
                                std::ostream* pstream = nullptr) const final {
      transform_inits_impl(context, params_i, vars, pstream);
    }        

};
}

using stan_model = optimal_allocation_inference_model_namespace::optimal_allocation_inference_model;

#ifndef USING_R

// Boilerplate
stan::model::model_base& new_model(
        stan::io::var_context& data_context,
        unsigned int seed,
        std::ostream* msg_stream) {
  stan_model* m = new stan_model(data_context, seed, msg_stream);
  return *m;
}

stan::math::profile_map& get_stan_profile_data() {
  return optimal_allocation_inference_model_namespace::profiles__;
}

#endif


